{"version":3,"sources":["jsFiles/questionAnswer.js","jsFiles/excelReader.js","reactFiles/qaTable.jsx","reactFiles/qaPage.jsx","reactFiles/mainPage.jsx","serviceWorker.js","index.js"],"names":["questionAnswer","question","answer","Object","classCallCheck","this","excelReader","workbook","qaArray","shuffledQaArray","bonusQaArray","shuffledBonusQaArray","counter","bonusCounter","readExcel","undefined","SheetNames","worksheet","Sheets","tempJSON","XLSX","utils","sheet_to_json","i","length","temp","Questions","Answers","push","seed","shuffleSeed","require","shuffle","getQuestion","getAnswer","console","log","alert","getBonusQuestion","getBonusAnswer","QaTable","props","possibleConstructorReturn","getPrototypeOf","call","bool","x","window","getBonusArray","row","document","getElementById","insertRow","cell1","insertCell","cell2","innerHTML","getArray","ReactDOM","render","react_default","a","createElement","qaPage_QAPage","id","onClick","handleQaPage","bind","React","Component","QAPage","_this","state","handleNext","getQuestionAnswer","setState","getPreviousQuestionAnswer","getBonusQuestionAnswer","qaTable_QaTable","number","value","parseInt","className","handlePrevious","handleBonus","getTable","type","placeholder","jumpToQuestion","FileChooser","e","reader","FileReader","onload","oFile","read","target","result","shuffleArray","readAsArrayBuffer","files","ev","preventDefault","dataTransfer","items","kind","file","getAsFile","name","clear","clearData","ondrop","dropHandler","ondragover","dragOverHandler","accept","handleFiles","Boolean","location","hostname","match","mainPage_FileChooser","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb17161d.chunk.js","sourcesContent":["export default class questionAnswer {\n    constructor(question, answer) {\n        this.question = question;\n        this.answer = answer;\n    }\n\n    getAnswer() {\n        return this.answer;\n    }\n\n    getQuestion()\n    {\n        return this.question;\n    }\n}\n","import XLSX from \"xlsx\";\nimport questionAnswer from \"./questionAnswer.js\";\n\nexport default class excelReader\n{\n    constructor(workbook)\n    {\n        this.workbook=workbook;\n        this.qaArray=[];\n        this.shuffledQaArray=[];\n        this.bonusQaArray=[];\n        this.shuffledBonusQaArray=[];\n        this.counter=0;\n        this.bonusCounter=0;\n        this.readExcel();\n    }\n\n    /*\n        2 types of questions the file reads\n        Bonus Question\n        Lightning Question\n     */\n    readExcel()\n    {\n        if (!(this.workbook===undefined))\n        {\n            let counter=0;\n\n            while (this.workbook.SheetNames[counter]!==undefined)\n            {\n                // console.log(this.workbook.SheetNames[counter]);\n            let worksheet=this.workbook.Sheets[this.workbook.SheetNames[counter]];\n            if (this.workbook.SheetNames[counter]===\"Bonus\")\n            {\n                let tempJSON=XLSX.utils.sheet_to_json(worksheet);\n                for (let i=0;i<tempJSON.length;i++)\n                {\n                    let temp=new questionAnswer(tempJSON[i].Questions,tempJSON[i].Answers);\n                    this.bonusQaArray.push(temp);\n                }\n            } else\n            {\n                let tempJSON=XLSX.utils.sheet_to_json(worksheet);\n                for (let i=0;i<tempJSON.length;i++)\n                {\n                    if (tempJSON[i].Questions!==undefined && tempJSON[i].Answers!==undefined &&\n                        tempJSON[i].Questions!==\"\" && tempJSON[i].Answers!==\"\")\n                    {\n                        let temp=new questionAnswer(tempJSON[i].Questions,tempJSON[i].Answers);\n                        this.qaArray.push(temp);\n                    }\n                    // console.log(tempJSON[i].Questions);\n\n                    // console.log(this.qaArray);\n                }\n                // console.log(this.qaArray);\n            }\n            counter++;\n        }\n        }\n        // console.log(this.qaArray);\n    //\n    // console.log(this.qaArray);\n    }\n\n    shuffleArray(seed)\n    {\n        let shuffleSeed = require('shuffle-seed');\n        this.qaArray=shuffleSeed.shuffle(this.qaArray,seed);\n    }\n\n    getQuestion()\n    {\n        return this.qaArray[this.counter].getQuestion();\n    }\n\n    getAnswer()\n    {\n        return this.qaArray[this.counter].getAnswer();\n    }\n\n    //gets question and answer pair then increases inherit counter\n    getQuestionAnswer()\n    {\n        if (this.counter>=this.qaArray.length)\n        {\n            alert(\"No more questions left\");\n        } else\n        {\n            this.counter++;\n            console.log(this.counter);\n            let temp={question:this.getQuestion(),answer:this.getAnswer()};\n            return temp;\n        }\n    }\n    //gets the previous question answer pair\n    getPreviousQuestionAnswer()\n    {\n        if (this.counter===1)\n        {\n            alert(\"This is the first question\");\n        } else\n        {\n            if (this.counter>=this.qaArray.length)\n            {\n                alert(\"No more questions left\");\n            } else\n            {\n                this.counter--;\n                console.log(this.counter);\n                let temp={question:this.getQuestion(),answer:this.getAnswer()};\n                return temp;\n            }\n        }\n    }\n\n    getArray()\n    {\n        return this.qaArray;\n    }\n\n    getBonusArray()\n    {\n        return this.bonusQaArray;\n    }\n\n    getBonusQuestion()\n    {\n        return this.bonusQaArray[this.bonusCounter].getQuestion();\n    }\n\n    getBonusAnswer()\n    {\n        return this.bonusQaArray[this.bonusCounter].getAnswer();\n    }\n\n    getBonusQuestionAnswer()\n    {\n        if (this.bonusCounter>=this.bonusQaArray.length)\n        {\n            alert(\"No more bonus questions left\");\n        } else\n        {\n            let temp={question:this.getBonusQuestion(),answer:this.getBonusAnswer()};\n            this.bonusCounter++;\n            return temp;\n        }\n    }\n}","import React from \"react\";\nimport excelReader from \"../jsFiles/excelReader.js\";\nimport global from \"../jsFiles/globalVariables\";\nimport ReactDOM from \"react-dom\";\nimport QAPage from \"./qaPage\";\n\nexport default class QaTable extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n    }\n\n    componentDidMount()\n    {\n        if (this.props.bool===true)\n        {\n            let x=window.excelReader.getBonusArray();\n            for (let i=0;i<x.length;i++)\n            {\n                let table=document.getElementById(\"table\");\n                let row=table.insertRow(i+1);\n                let cell1=row.insertCell(0);\n                let cell2=row.insertCell(1);\n                cell1.innerHTML=x[i].question;\n                cell2.innerHTML=x[i].answer;\n            }\n        } else\n        {\n            let x=window.excelReader.getArray();\n            for (let i=0;i<x.length;i++)\n            {\n                let table=document.getElementById(\"table\");\n                let row=table.insertRow(i+1);\n                let cell1=row.insertCell(0);\n                let cell2=row.insertCell(1);\n                cell1.innerHTML=x[i].question;\n                cell2.innerHTML=x[i].answer;\n\n            }\n        }\n\n    }\n\n    handleQaPage()\n    {\n        ReactDOM.render(<QAPage/>, document.getElementById(\"root\"));\n    }\n\n    render()\n    {\n        return(\n            <div id={\"qaTable\"}>\n                <table id={\"table\"}>\n                    <tbody>\n                        <tr id={\"firstRow\"}>\n                            <th>Question</th>\n                            <th>Answer</th>\n                        </tr>\n                    </tbody>\n                </table>\n                <button onClick={this.handleQaPage.bind(this)} id={\"button\"}>Go Back</button>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport excelReader from \"../jsFiles/excelReader.js\";\nimport global from \"../jsFiles/globalVariables\";\nimport QaTable from \"./qaTable\";\nimport ReactDOM from \"react-dom\";\n\nexport default class QAPage extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state=\n        {\n            question:\"a\",\n            answer:\"b\"\n        };\n    }\n\n    componentDidMount()\n    {\n        // window.excelReader.counter=0;\n        this.handleNext();\n    }\n\n    //gets next question answer pair\n    handleNext()\n    {\n        let temp=window.excelReader.getQuestionAnswer();\n        this.setState(\n            {\n                question:temp.question,\n                answer:temp.answer\n            }\n        )\n    }\n\n    //gets previous question answer pair\n    handlePrevious()\n    {\n        let temp=window.excelReader.getPreviousQuestionAnswer();\n        if (temp!==undefined)\n        {\n            this.setState(\n                {\n                    question: temp.question,\n                    answer: temp.answer\n                }\n            )\n        }\n    }\n\n    //Handles bonus questions and formats them\n    handleBonus()\n    {\n        let temp=window.excelReader.getBonusQuestionAnswer();\n        this.setState(\n            {\n                question:temp.question,\n                answer:temp.answer\n            })\n    }\n\n    getTable(bool)\n    {\n        ReactDOM.render(<QaTable bool={bool}/>,document.getElementById(\"root\"));\n    }\n\n    jumpToQuestion()\n    {\n        let number=document.getElementById(\"questionNumber\").value;\n        window.excelReader.counter=parseInt(number);\n        this.handleNext();\n    }\n\n    render()\n    {\n\n        return(\n            <div id={\"qaPage\"}>\n                <p className={\"qa\"}>Question<br/>{this.state.question}</p>\n                <p className={\"qa\"}>Answer<br/>{this.state.answer}</p>\n                <button onClick={this.handlePrevious.bind(this)}>Previous Question</button>\n                <button onClick={this.handleNext.bind(this)}>Next Question</button>\n                <button onClick={this.handleBonus.bind(this)}>Bonus Question</button>\n                <button onClick={this.getTable.bind(this,false)}>Get List of Lightning Questions</button>\n                <button onClick={this.getTable.bind(this,true)}>Get List of Bonus Questions</button>\n                {/*<button onClick={this.getTable.bind(this)}>QuestionList</button>*/}\n                <form>\n                    <input type={\"text\"} placeholder={\"Go to question number\"} id={\"questionNumber\"}></input>\n                    <br/><input type=\"button\" value=\"Submit\" onClick={this.jumpToQuestion.bind(this)} id={\"button\"}/>\n                </form>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport XLSX from \"xlsx\";\nimport excelReader from \"../jsFiles/excelReader.js\"\nimport QAPage from \"../reactFiles/qaPage\";\nimport ReactDOM from 'react-dom';\nimport global from \"../jsFiles/globalVariables\";\n\n\nexport default class FileChooser extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleFiles() //reads excel file when the start button is pressed\n    {\n        window.excelReader = new excelReader();\n        let e = document.getElementById(\"fileInput\");\n        let reader = new FileReader();\n        reader.onload = function (e) {\n            var oFile = XLSX.read(e.target.result, {type: 'array'});//, cellDates:true, cellStyles:true\n            window.excelReader = new excelReader(oFile);\n            if (document.getElementById(\"randomizerText\").value!==\"\")\n            {\n                window.excelReader.shuffleArray(document.getElementById(\"randomizerText\").value);\n            }\n            // console.log(window.excelReader);\n            ReactDOM.render(<QAPage/>, document.getElementById(\"root\"));\n        };\n        reader.readAsArrayBuffer(e.files[0]);\n        // console.log(window.excelReader);\n\n    }\n\n    dropHandler(ev)\n    {\n        console.log('File(s) dropped');\n\n        // Prevent default behavior (Prevent file from being opened)\n        ev.preventDefault();\n\n        if (ev.dataTransfer.items) {\n            // Use DataTransferItemList interface to access the file(s)\n            for (let i = 0; i < ev.dataTransfer.items.length; i++) {\n                // If dropped items aren't files, reject them\n                if (ev.dataTransfer.items[i].kind === 'file')\n                {\n                    let file = ev.dataTransfer.items[i].getAsFile();\n                    console.log('... file[' + i + '].name = ' + file.name);\n                }\n            }\n        } else {\n            // Use DataTransfer interface to access the file(s)\n            for (var i = 0; i < ev.dataTransfer.files.length; i++) {\n                console.log('... file[' + i + '].name = ' + ev.dataTransfer.files[i].name);\n            }\n        }\n\n        // Pass event to removeDragData for cleanup\n        if (ev.dataTransfer.items) {\n            // Use DataTransferItemList interface to remove the drag data\n            ev.dataTransfer.items.clear();\n        } else {\n            // Use DataTransfer interface to remove the drag data\n            ev.dataTransfer.clearData();\n        }\n    }\n\n    dragOverHandler(ev)\n    {\n        console.log('File(s) in drop zone');\n\n        // Prevent default behavior (Prevent file from being opened)\n        ev.preventDefault();\n    }\n\n    render()\n    {\n        return (\n            <div id={\"firstPage\"}>\n                <h1>Get File</h1>\n                <form id={\"getPage\"} ondrop={this.dropHandler.bind(this)} ondragover={this.dragOverHandler.bind(this)}>\n                    <input type=\"file\" name=\"file\" accept={\".xlsx,.xls,csv\"} id={\"fileInput\"}></input>\n                    <input type={\"text\"} placeholder={\"Seed randomizer\"} id={\"randomizerText\"}></input>\n                    <br/><input type=\"button\" value=\"Submit\" onClick={this.handleFiles.bind(this)} id={\"button\"}/>\n                </form>\n\n\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainPage from './reactFiles/mainPage';\nimport * as serviceWorker from './serviceWorker';\nimport XLSX from \"xlsx\";\n\n\n// document.addEventListener('DOMContentLoaded', function()\n// {\n    ReactDOM.render(<MainPage />, document.getElementById('root'));\n//     document.getElementById(\"fileInput\").change(function(e)\n//     {\n//         let reader = new FileReader();\n//         reader.readAsArrayBuffer(e.target.files[0]);\n//         reader.onload = function(e)\n//         {\n//             var data = new Uint8Array(reader.result);\n//             var wb = XLSX.read(data,{type:'array'});\n//             alert(wb);\n//             XLSX.utils.sheet_to_json(wb);\n//             //var htmlstr = XLSX.write(wb,{sheet:\"sheet no1\", type:'binary',bookType:'html'});\n//\n//         }\n//     });\n//     // your code goes here\n// }, false);\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}