{"version":3,"sources":["jsFiles/questionAnswer.js","reactFiles/qaTable.jsx","reactFiles/qaPage.jsx","jsFiles/excelReader.js","reactFiles/mainPage.jsx","serviceWorker.js","index.js"],"names":["questionAnswer","question","answer","Object","classCallCheck","this","QaTable","props","possibleConstructorReturn","getPrototypeOf","call","x","window","excelReader","getArray","i","length","row","document","getElementById","insertRow","cell1","insertCell","cell2","innerHTML","ReactDOM","render","react_default","a","createElement","qaPage_QAPage","id","onClick","handleQaPage","bind","React","Component","QAPage","_this","state","handleNext","temp","getQuestionAnswer","setState","getBonusQuestionAnswer","qaTable_QaTable","number","value","counter","parseInt","className","handleBonus","getTable","type","placeholder","jumpToQuestion","workbook","qaArray","shuffledQaArray","bonusQaArray","shuffledBonusQaArray","bonusCounter","readExcel","undefined","SheetNames","worksheet","Sheets","tempJSON","XLSX","utils","sheet_to_json","Questions","Answers","push","seed","shuffleSeed","require","shuffle","console","log","getQuestion","getAnswer","alert","getBonusQuestion","getBonusAnswer","FileChooser","e","reader","FileReader","onload","oFile","read","target","result","shuffleArray","readAsArrayBuffer","files","ev","preventDefault","dataTransfer","items","kind","file","getAsFile","name","clear","clearData","ondrop","dropHandler","ondragover","dragOverHandler","accept","handleFiles","Boolean","location","hostname","match","mainPage_FileChooser","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed27c6b5.chunk.js","sourcesContent":["export default class questionAnswer {\n    constructor(question, answer) {\n        this.question = question;\n        this.answer = answer;\n    }\n\n    getAnswer() {\n        return this.answer;\n    }\n\n    getQuestion()\n    {\n        return this.question;\n    }\n}\n","import React from \"react\";\nimport excelReader from \"../jsFiles/excelReader.js\";\nimport global from \"../jsFiles/globalVariables\";\nimport ReactDOM from \"react-dom\";\nimport QAPage from \"./qaPage\";\n\nexport default class QaTable extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n    }\n\n    componentDidMount()\n    {\n        let x=window.excelReader.getArray();\n        for (let i=0;i<x.length;i++)\n        {\n            let table=document.getElementById(\"table\");\n            let row=table.insertRow(i+1);\n            let cell1=row.insertCell(0);\n            let cell2=row.insertCell(1);\n            cell1.innerHTML=x[i].question;\n            cell2.innerHTML=x[i].answer;\n\n        }\n    }\n\n    handleQaPage()\n    {\n        ReactDOM.render(<QAPage/>, document.getElementById(\"root\"));\n    }\n\n    render()\n    {\n        return(\n            <div id={\"qaTable\"}>\n                <table id={\"table\"}>\n                    <tr id={\"firstRow\"}>\n                        <th>Question</th>\n                        <th>Answer</th>\n                    </tr>\n                </table>\n                <button onClick={this.handleQaPage.bind(this)} id={\"button\"}>Go Back</button>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport excelReader from \"../jsFiles/excelReader.js\";\nimport global from \"../jsFiles/globalVariables\";\nimport QaTable from \"./qaTable\";\nimport ReactDOM from \"react-dom\";\n\nexport default class QAPage extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state=\n        {\n            question:\"a\",\n            answer:\"b\"\n        };\n    }\n\n    componentDidMount()\n    {\n        // window.excelReader.counter=0;\n        this.handleNext();\n    }\n\n    handleNext()\n    {\n        let temp=window.excelReader.getQuestionAnswer();\n        this.setState(\n            {\n                question:temp.question,\n                answer:temp.answer\n            }\n        )\n    }\n\n    handleBonus()\n    {\n        let temp=window.excelReader.getBonusQuestionAnswer();\n        this.setState(\n            {\n                question:temp.question,\n                answer:temp.answer\n            }\n        )\n    }\n\n    getTable()\n    {\n        ReactDOM.render(<QaTable/>,document.getElementById(\"root\"));\n    }\n\n    jumpToQuestion()\n    {\n        let number=document.getElementById(\"questionNumber\").value;\n        window.excelReader.counter=parseInt(number);\n        this.handleNext();\n    }\n\n    render()\n    {\n\n        return(\n            <div id={\"qaPage\"}>\n                <p className={\"qa\"}>{this.state.question}</p>\n                <p className={\"qa\"}>{this.state.answer}</p>\n                <button onClick={this.handleNext.bind(this)}>Next Question</button>\n                <button onClick={this.handleBonus.bind(this)}>Bonus Question</button>\n                <button onClick={this.getTable.bind(this)}>QuestionList</button>\n                {/*<button onClick={this.getTable.bind(this)}>QuestionList</button>*/}\n                <form>\n                    <input type={\"text\"} placeholder={\"Go to question number\"} id={\"questionNumber\"}></input>\n                    <br/><input type=\"button\" value=\"Submit\" onClick={this.jumpToQuestion.bind(this)} id={\"button\"}/>\n                </form>\n            </div>\n        );\n    }\n}","import XLSX from \"xlsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport questionAnswer from \"./questionAnswer.js\";\nimport QAPage from \"../reactFiles/qaPage\";\n\nexport default class excelReader\n{\n    constructor(workbook)\n    {\n        this.workbook=workbook;\n        this.qaArray=[];\n        this.shuffledQaArray=[];\n        this.bonusQaArray=[];\n        this.shuffledBonusQaArray=[];\n        this.counter=0;\n        this.bonusCounter=0;\n        this.readExcel();\n    }\n    readExcel()\n    {\n        if (!(this.workbook===undefined))\n        {\n            let counter=0;\n\n            while (this.workbook.SheetNames[counter]!==undefined)\n            {\n                // console.log(this.workbook.SheetNames[counter]);\n            let worksheet=this.workbook.Sheets[this.workbook.SheetNames[counter]];\n            if (this.workbook.SheetNames[counter]===\"Bonus\")\n            {\n                let tempJSON=XLSX.utils.sheet_to_json(worksheet);\n                for (let i=0;i<tempJSON.length;i++)\n                {\n                    let temp=new questionAnswer(tempJSON[i].Questions,tempJSON[i].Answers);\n                    this.bonusQaArray.push(temp);\n                }\n            } else\n            {\n                let tempJSON=XLSX.utils.sheet_to_json(worksheet);\n                    // console.log(tempJSON[0].Questions);\n                    // console.log(new questionAnswer(tempJSON[0].Questions,tempJSON[0].Answers));\n                for (let i=0;i<tempJSON.length;i++)\n                {\n                    let temp=new questionAnswer(tempJSON[i].Questions,tempJSON[i].Answers);\n                    this.qaArray.push(temp);\n                    // console.log(this.qaArray);\n                }\n                // console.log(this.qaArray);\n            }\n            counter++;\n        }\n        }\n        // console.log(this.qaArray);\n    //\n    // console.log(this.qaArray);\n    }\n\n    shuffleArray(seed)\n    {\n        let shuffleSeed = require('shuffle-seed');\n        this.qaArray=shuffleSeed.shuffle(this.qaArray,seed);\n        console.log(this.qaArray);\n    }\n\n    getQuestion()\n    {\n        return this.qaArray[this.counter].getQuestion();\n    }\n\n    getAnswer()\n    {\n        return this.qaArray[this.counter].getAnswer();\n    }\n\n    getQuestionAnswer()\n    {\n        if (this.counter>=this.qaArray.length)\n        {\n            alert(\"No more questions left\");\n        } else\n        {\n            let temp={question:this.getQuestion(),answer:this.getAnswer()};\n            this.counter++;\n            return temp;\n        }\n    }\n\n    getArray()\n    {\n        return this.qaArray;\n    }\n\n    getBonusQuestion()\n    {\n        return this.bonusQaArray[this.bonusCounter].getQuestion();\n    }\n\n    getBonusAnswer()\n    {\n        return this.bonusQaArray[this.bonusCounter].getAnswer();\n    }\n\n    getBonusQuestionAnswer()\n    {\n        if (this.bonusCounter>=this.bonusQaArray.length)\n        {\n            alert(\"No more bonus questions left\");\n        } else\n        {\n            let temp={question:this.getBonusQuestion(),answer:this.getBonusAnswer()};\n            this.bonusCounter++;\n            return temp;\n        }\n    }\n}","import React from \"react\";\nimport XLSX from \"xlsx\";\nimport excelReader from \"../jsFiles/excelReader.js\"\nimport QAPage from \"../reactFiles/qaPage\";\nimport ReactDOM from 'react-dom';\nimport global from \"../jsFiles/globalVariables\";\n\n\nexport default class FileChooser extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleFiles() {\n        window.excelReader = new excelReader();\n        let e = document.getElementById(\"fileInput\");\n        let reader = new FileReader();\n        reader.onload = function (e) {\n            var oFile = XLSX.read(e.target.result, {type: 'array'});//, cellDates:true, cellStyles:true\n            window.excelReader = new excelReader(oFile);\n            if (document.getElementById(\"randomizerText\").value!==\"\")\n            {\n                window.excelReader.shuffleArray(document.getElementById(\"randomizerText\").value);\n            }\n            // console.log(window.excelReader);\n            ReactDOM.render(<QAPage/>, document.getElementById(\"root\"));\n        };\n        reader.readAsArrayBuffer(e.files[0]);\n        // console.log(window.excelReader);\n\n    }\n\n    dropHandler(ev) {\n        console.log('File(s) dropped');\n\n        // Prevent default behavior (Prevent file from being opened)\n        ev.preventDefault();\n\n        if (ev.dataTransfer.items) {\n            // Use DataTransferItemList interface to access the file(s)\n            for (var i = 0; i < ev.dataTransfer.items.length; i++) {\n                // If dropped items aren't files, reject them\n                if (ev.dataTransfer.items[i].kind === 'file')\n                {\n                    var file = ev.dataTransfer.items[i].getAsFile();\n                    console.log('... file[' + i + '].name = ' + file.name);\n                }\n            }\n        } else {\n            // Use DataTransfer interface to access the file(s)\n            for (var i = 0; i < ev.dataTransfer.files.length; i++) {\n                console.log('... file[' + i + '].name = ' + ev.dataTransfer.files[i].name);\n            }\n        }\n\n        // Pass event to removeDragData for cleanup\n        if (ev.dataTransfer.items) {\n            // Use DataTransferItemList interface to remove the drag data\n            ev.dataTransfer.items.clear();\n        } else {\n            // Use DataTransfer interface to remove the drag data\n            ev.dataTransfer.clearData();\n        }\n    }\n\n    dragOverHandler(ev)\n    {\n        console.log('File(s) in drop zone');\n\n        // Prevent default behavior (Prevent file from being opened)\n        ev.preventDefault();\n    }\n\n    render()\n    {\n        return (\n            <div id={\"firstPage\"}>\n                <h1>Get File</h1>\n                <form id={\"getPage\"} ondrop={this.dropHandler.bind(this)} ondragover={this.dragOverHandler.bind(this)}>\n                    <input type=\"file\" name=\"file\" accept={\".xlsx,.xls,csv\"} id={\"fileInput\"}></input>\n                    <input type={\"text\"} placeholder={\"Seed randomizer\"} id={\"randomizerText\"}></input>\n                    <br/><input type=\"button\" value=\"Submit\" onClick={this.handleFiles.bind(this)} id={\"button\"}/>\n                </form>\n\n\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainPage from './reactFiles/mainPage';\nimport * as serviceWorker from './serviceWorker';\nimport XLSX from \"xlsx\";\n\n\n// document.addEventListener('DOMContentLoaded', function()\n// {\n    ReactDOM.render(<MainPage />, document.getElementById('root'));\n//     document.getElementById(\"fileInput\").change(function(e)\n//     {\n//         let reader = new FileReader();\n//         reader.readAsArrayBuffer(e.target.files[0]);\n//         reader.onload = function(e)\n//         {\n//             var data = new Uint8Array(reader.result);\n//             var wb = XLSX.read(data,{type:'array'});\n//             alert(wb);\n//             XLSX.utils.sheet_to_json(wb);\n//             //var htmlstr = XLSX.write(wb,{sheet:\"sheet no1\", type:'binary',bookType:'html'});\n//\n//         }\n//     });\n//     // your code goes here\n// }, false);\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}